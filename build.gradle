plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'application'
}

application {
	mainClass = 'com.belyaeva.confectionerygradle.ConfectioneryGradleApplication'
}

group = 'com.belyaeva'
version = '0.0.1'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.1.1.RELEASE'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java:8.0.31'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

java {
	withSourcesJar()
}

task uberJar(type: Jar) {
	archiveClassifier = 'uber'

	manifest {
		attributes (
				'Main-Class': 'com.belyaeva.confectionerygradle.ConfectioneryGradleApplication',
				'Implementation-Title': project.name,
				'Implementation-Version': project.version
		)
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from sourceSets.main.output

	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
}

bootJar {
	archiveClassifier = 'boot'

	manifest {
		attributes (
				'Main-Class': 'com.belyaeva.confectionerygradle.ConfectioneryGradleApplication',
				'Implementation-Title': project.name,
				'Implementation-Version': project.version
		)
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from sourceSets.main.output
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}

	launchScript()
}